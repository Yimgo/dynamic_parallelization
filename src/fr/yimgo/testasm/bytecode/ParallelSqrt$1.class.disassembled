// javap -c -p -s -l -verbose build/fr/yimgo/testasm/ParallelSqrt$1.class
Classfile /home/guillaume/devel/Yimgo/test_asm/build/fr/yimgo/testasm/ParallelSqrt$1.class
  Last modified May 14, 2014; size 878 bytes
  MD5 checksum 63c53f2693dc3d9a7cff3b53b2d87142
class fr.yimgo.testasm.ParallelSqrt$1 extends java.lang.Object implements java.util.concurrent.Callable<java.lang.Double>
  Signature: #23                          // Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Double;>;
  EnclosingMethod: #25.#26                // fr.yimgo.testasm.ParallelSqrt.sqrt
  InnerClasses:
       #7; //class fr/yimgo/testasm/ParallelSqrt$1
  minor version: 0
  major version: 52
  flags: ACC_SUPER
Constant pool:
   #1 = Fieldref           #7.#27         //  fr/yimgo/testasm/ParallelSqrt$1.this$0:Lfr/yimgo/testasm/ParallelSqrt;
   #2 = Fieldref           #7.#28         //  fr/yimgo/testasm/ParallelSqrt$1.val$base:I
   #3 = Methodref          #8.#29         //  java/lang/Object."<init>":()V
   #4 = Methodref          #30.#31        //  java/lang/Math.sqrt:(D)D
   #5 = Methodref          #32.#33        //  java/lang/Double.valueOf:(D)Ljava/lang/Double;
   #6 = Methodref          #7.#34         //  fr/yimgo/testasm/ParallelSqrt$1.call:()Ljava/lang/Double;
   #7 = Class              #35            //  fr/yimgo/testasm/ParallelSqrt$1
   #8 = Class              #37            //  java/lang/Object
   #9 = Class              #38            //  java/util/concurrent/Callable
  #10 = Utf8               val$base
  #11 = Utf8               I
  #12 = Utf8               this$0
  #13 = Utf8               Lfr/yimgo/testasm/ParallelSqrt;
  #14 = Utf8               <init>
  #15 = Utf8               (Lfr/yimgo/testasm/ParallelSqrt;I)V
  #16 = Utf8               Code
  #17 = Utf8               call
  #18 = Utf8               ()Ljava/lang/Double;
  #19 = Utf8               Exceptions
  #20 = Class              #39            //  java/lang/Exception
  #21 = Utf8               ()Ljava/lang/Object;
  #22 = Utf8               Signature
  #23 = Utf8               Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Double;>;
  #24 = Utf8               EnclosingMethod
  #25 = Class              #40            //  fr/yimgo/testasm/ParallelSqrt
  #26 = NameAndType        #41:#42        //  sqrt:(ILjava/util/concurrent/ExecutorService;)Ljava/lang/Double;
  #27 = NameAndType        #12:#13        //  this$0:Lfr/yimgo/testasm/ParallelSqrt;
  #28 = NameAndType        #10:#11        //  val$base:I
  #29 = NameAndType        #14:#43        //  "<init>":()V
  #30 = Class              #44            //  java/lang/Math
  #31 = NameAndType        #41:#45        //  sqrt:(D)D
  #32 = Class              #46            //  java/lang/Double
  #33 = NameAndType        #47:#48        //  valueOf:(D)Ljava/lang/Double;
  #34 = NameAndType        #17:#18        //  call:()Ljava/lang/Double;
  #35 = Utf8               fr/yimgo/testasm/ParallelSqrt$1
  #36 = Utf8               InnerClasses
  #37 = Utf8               java/lang/Object
  #38 = Utf8               java/util/concurrent/Callable
  #39 = Utf8               java/lang/Exception
  #40 = Utf8               fr/yimgo/testasm/ParallelSqrt
  #41 = Utf8               sqrt
  #42 = Utf8               (ILjava/util/concurrent/ExecutorService;)Ljava/lang/Double;
  #43 = Utf8               ()V
  #44 = Utf8               java/lang/Math
  #45 = Utf8               (D)D
  #46 = Utf8               java/lang/Double
  #47 = Utf8               valueOf
  #48 = Utf8               (D)Ljava/lang/Double;
{
  final int val$base;
    descriptor: I
    flags: ACC_FINAL, ACC_SYNTHETIC


  final fr.yimgo.testasm.ParallelSqrt this$0;
    descriptor: Lfr/yimgo/testasm/ParallelSqrt;
    flags: ACC_FINAL, ACC_SYNTHETIC


  fr.yimgo.testasm.ParallelSqrt$1(fr.yimgo.testasm.ParallelSqrt, int);
    descriptor: (Lfr/yimgo/testasm/ParallelSqrt;I)V
    flags: 
    Code:
      stack=2, locals=3, args_size=3
         0: aload_0       
         1: aload_1       
         2: putfield      #1                  // Field this$0:Lfr/yimgo/testasm/ParallelSqrt;
         5: aload_0       
         6: iload_2       
         7: putfield      #2                  // Field val$base:I
        10: aload_0       
        11: invokespecial #3                  // Method java/lang/Object."<init>":()V
        14: return        

  public java.lang.Double call() throws java.lang.Exception;
    descriptor: ()Ljava/lang/Double;
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0       
         1: getfield      #2                  // Field val$base:I
         4: i2d           
         5: invokestatic  #4                  // Method java/lang/Math.sqrt:(D)D
         8: invokestatic  #5                  // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
        11: areturn       
    Exceptions:
      throws java.lang.Exception

  public java.lang.Object call() throws java.lang.Exception;
    descriptor: ()Ljava/lang/Object;
    flags: ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0       
         1: invokevirtual #6                  // Method call:()Ljava/lang/Double;
         4: areturn       
    Exceptions:
      throws java.lang.Exception
}
